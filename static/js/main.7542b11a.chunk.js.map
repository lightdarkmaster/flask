{"version":3,"sources":["bg.png","cblogo.PNG","home.js","App.js","cameraComponent.js","index.js"],"names":["withStyles","theme","root","color","palette","getContrastText","common","white","backgroundColor","Button","require","default","makeStyles","grow","flexGrow","clearButton","width","borderRadius","padding","fontSize","fontWeight","maxWidth","media","height","paper","spacing","margin","gridContainer","justifyContent","mainContainer","backgroundImage","image","backgroundRepeat","backgroundPosition","backgroundSize","marginTop","imageCard","boxShadow","imageCardEmpty","noImage","input","display","uploadIcon","background","tableContainer","table","tableHead","tableRow","tableCell","borderColor","tableCell1","tableBody","text","textAlign","buttonGrid","detail","flexDirection","alignItems","appbar","loader","App","useStyles","top","marginRight","CameraCard","classes","useState","selectedFile","setSelectedFile","preview","setPreview","data","setData","setImage","isLoading","setIsloading","confidence","ColorButton","axios","sendFile","a","formData","FormData","append","method","url","process","res","status","useEffect","objectUrl","URL","createObjectURL","undefined","sendFileImage","parseFloat","toFixed","stream","setStream","videoRef","useRef","canvasRef","x","y","startCamera","navigator","mediaDevices","getUserMedia","video","mediaStream","current","srcObject","console","error","processImage","ctx","getContext","videoWidth","videoHeight","drawImage","dataUrl","toDataURL","blob","dataURLtoBlob","arr","split","mime","match","bstr","atob","n","length","u8arr","Uint8Array","charCodeAt","Blob","type","log","className","Container","disableGutters","Grid","container","direction","item","xs","md","ref","autoPlay","playsInline","position","onClick","clearRect","getTracks","forEach","track","stop","downloadLink","document","createElement","href","download","click","window","location","reload","Card","CardActionArea","CardMedia","component","title","CardContent","content","acceptedFiles","dropzoneText","onChange","files","TableContainer","Paper","Table","size","TableHead","TableRow","TableCell","align","TableBody","scope","class","CircularProgress","Typography","variant","noWrap","startIcon","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7542b11a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.d6836046.png\";","export default __webpack_public_path__ + \"static/media/cblogo.fcecc55f.PNG\";","import { useState, useEffect } from \"react\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Avatar from \"@material-ui/core/Avatar\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport React from \"react\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport { Paper, CardActionArea, CardMedia, Grid, TableContainer, Table, TableBody, TableHead, TableRow, TableCell, Button, CircularProgress } from \"@material-ui/core\";\r\nimport cblogo from \"./cblogo.PNG\";\r\nimport image from \"./bg.png\";\r\nimport { DropzoneArea } from 'material-ui-dropzone';\r\nimport { common } from '@material-ui/core/colors';\r\nimport Clear from '@material-ui/icons/Clear';\r\n\r\n\r\n\r\n\r\nconst ColorButton = withStyles((theme) => ({\r\n  root: {\r\n    color: theme.palette.getContrastText(common.white),\r\n    backgroundColor: common.white,\r\n    '&:hover': {\r\n      backgroundColor: '#ffffff7a',\r\n    },\r\n  },\r\n}))(Button);\r\nconst axios = require(\"axios\").default;\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  clearButton: {\r\n    width: \"-webkit-fill-available\",\r\n    borderRadius: \"15px\",\r\n    padding: \"15px 22px\",\r\n    color: \"#000000a6\",\r\n    fontSize: \"20px\",\r\n    fontWeight: 900,\r\n  },\r\n  root: {\r\n    maxWidth: 345,\r\n    flexGrow: 1,\r\n  },\r\n  media: {\r\n    height: 400,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: 'auto',\r\n    maxWidth: 500,\r\n  },\r\n  gridContainer: {\r\n    justifyContent: \"center\",\r\n    padding: \"4em 1em 0 1em\",\r\n  },\r\n  mainContainer: {\r\n    backgroundImage: `url(${image})`,\r\n    backgroundRepeat: 'no-repeat',\r\n    backgroundPosition: 'center',\r\n    backgroundSize: 'cover',\r\n    height: \"93vh\",\r\n    marginTop: \"8px\",\r\n  },\r\n  imageCard: {\r\n    margin: \"auto\",\r\n    maxWidth: 400,\r\n    height: 500,\r\n    backgroundColor: 'transparent',\r\n    boxShadow: '0px 9px 70px 0px rgb(0 0 0 / 30%) !important',\r\n    borderRadius: '15px',\r\n  },\r\n  imageCardEmpty: {\r\n    height: 'auto',\r\n  },\r\n  noImage: {\r\n    margin: \"auto\",\r\n    width: 400,\r\n    height: \"400 !important\",\r\n  },\r\n  input: {\r\n    display: 'none',\r\n  },\r\n  uploadIcon: {\r\n    background: 'white',\r\n  },\r\n  tableContainer: {\r\n    backgroundColor: 'transparent !important',\r\n    boxShadow: 'none !important',\r\n  },\r\n  table: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  tableHead: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  tableRow: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  tableCell: {\r\n    fontSize: '22px',\r\n    backgroundColor: 'transparent !important',\r\n    borderColor: 'transparent !important',\r\n    color: '#000000a6 !important',\r\n    fontWeight: 'bolder',\r\n    padding: '1px 24px 1px 16px',\r\n  },\r\n  tableCell1: {\r\n    fontSize: '14px',\r\n    backgroundColor: 'transparent !important',\r\n    borderColor: 'transparent !important',\r\n    color: '#000000a6 !important',\r\n    fontWeight: 'bolder',\r\n    padding: '1px 24px 1px 16px',\r\n  },\r\n  tableBody: {\r\n    backgroundColor: 'transparent !important',\r\n  },\r\n  text: {\r\n    color: 'white !important',\r\n    textAlign: 'center',\r\n  },\r\n  buttonGrid: {\r\n    maxWidth: \"416px\",\r\n    width: \"100%\",\r\n  },\r\n  detail: {\r\n    backgroundColor: 'white',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  appbar: {\r\n    background: 'lightgreen',\r\n    boxShadow: 'none',\r\n    color: 'black'\r\n  },\r\n  loader: {\r\n    color: '#be6a77 !important',\r\n  }\r\n}));\r\nexport const ImageUpload = () => {\r\n  const classes = useStyles();\r\n  const [selectedFile, setSelectedFile] = useState();\r\n  const [preview, setPreview] = useState();\r\n  const [data, setData] = useState();\r\n  const [image, setImage] = useState(false);\r\n  const [isLoading, setIsloading] = useState(false);\r\n  let confidence = 0;\r\n\r\n  const sendFile = async () => {\r\n    if (image) {\r\n      let formData = new FormData();\r\n      formData.append(\"file\", selectedFile);\r\n      let res = await axios({\r\n        method: \"post\",\r\n        url: process.env.REACT_APP_API_URL,\r\n        data: formData,\r\n      });\r\n      if (res.status === 200) {\r\n        setData(res.data);\r\n      }\r\n      setIsloading(false);\r\n    }\r\n  }\r\n\r\n  const clearData = () => {\r\n    setData(null);\r\n    setImage(false);\r\n    setSelectedFile(null);\r\n    setPreview(null);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!selectedFile) {\r\n      setPreview(undefined);\r\n      return;\r\n    }\r\n    const objectUrl = URL.createObjectURL(selectedFile);\r\n    setPreview(objectUrl);\r\n  }, [selectedFile]);\r\n\r\n  useEffect(() => {\r\n    if (!preview) {\r\n      return;\r\n    }\r\n    setIsloading(true);\r\n    sendFile();\r\n  }, [preview]);\r\n\r\n  const onSelectFile = (files) => {\r\n    if (!files || files.length === 0) {\r\n      setSelectedFile(undefined);\r\n      setImage(false);\r\n      setData(undefined);\r\n      return;\r\n    }\r\n    setSelectedFile(files[0]);\r\n    setData(undefined);\r\n    setImage(true);\r\n  };\r\n\r\n  if (data) {\r\n    confidence = (parseFloat(data.confidence) * 100).toFixed(2);\r\n  }\r\n  const onCaptureImage = (capturedImageData) => {\r\n    // Here, you can directly use the captured image data (data URL) in your ImageUpload component\r\n    setSelectedFile(capturedImageData);\r\n    setData(undefined);\r\n    setImage(true);\r\n    setIsloading(true); // Assuming you want to trigger the image processing on capture\r\n    sendFile();\r\n  };\r\n  return (\r\n    <React.Fragment>\r\n      <AppBar position=\"static\" className={classes.appbar}>\r\n        <Toolbar>\r\n          <Typography className={classes.title} variant=\"h6\" noWrap>\r\n            Chan: Potato Disease Classification\r\n          </Typography>\r\n          <div className={classes.grow} />\r\n          <Avatar src={cblogo}></Avatar>\r\n        </Toolbar>\r\n      </AppBar>\r\n      <Container maxWidth={false} className={classes.mainContainer} disableGutters={true}>\r\n        <Grid\r\n          className={classes.gridContainer}\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          <Grid item xs={12}>\r\n            <Card className={`${classes.imageCard} ${!image ? classes.imageCardEmpty : ''}`}>\r\n              {image && <CardActionArea>\r\n                <CardMedia\r\n                  className={classes.media}\r\n                  image={preview}\r\n                  component=\"image\"\r\n                  title=\"Image Sample\"\r\n                />\r\n              </CardActionArea>\r\n              }\r\n              {!image && <CardContent className={classes.content}>\r\n                <DropzoneArea\r\n                  acceptedFiles={['image/*']}\r\n                  dropzoneText={\"Drag and drop an image of a potato plant leaf to process\"}\r\n                  onChange={onSelectFile}\r\n                />\r\n              </CardContent>}\r\n              {data && <CardContent className={classes.detail}>\r\n                <TableContainer component={Paper} className={classes.tableContainer}>\r\n                  <Table className={classes.table} size=\"small\" aria-label=\"simple table\">\r\n                    <TableHead className={classes.tableHead}>\r\n                      <TableRow className={classes.tableRow}>\r\n                        <TableCell className={classes.tableCell1}>Label:</TableCell>\r\n                        <TableCell align=\"right\" className={classes.tableCell1}>Confidence:</TableCell>\r\n                      </TableRow>\r\n                    </TableHead>\r\n                    <TableBody className={classes.tableBody}>\r\n                      <TableRow className={classes.tableRow}>\r\n                        <TableCell component=\"th\" scope=\"row\" className={classes.tableCell}>\r\n                          {data.class}\r\n                        </TableCell>\r\n                        <TableCell align=\"right\" className={classes.tableCell}>{confidence}%</TableCell>\r\n                      </TableRow>\r\n                    </TableBody>\r\n                  </Table>\r\n                </TableContainer>\r\n              </CardContent>}\r\n              {isLoading && <CardContent className={classes.detail}>\r\n                <CircularProgress color=\"secondary\" className={classes.loader} />\r\n                <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                  Processing\r\n                </Typography>\r\n              </CardContent>}\r\n            </Card>\r\n          </Grid>\r\n          {data &&\r\n            <Grid item className={classes.buttonGrid} >\r\n\r\n              <ColorButton variant=\"contained\" className={classes.clearButton} color=\"primary\" component=\"span\" size=\"large\" onClick={clearData} startIcon={<Clear fontSize=\"large\" />}>\r\n                Clear\r\n              </ColorButton>\r\n            </Grid>}\r\n        </Grid >\r\n      </Container >\r\n    </React.Fragment >\r\n  );\r\n};\r\n","import { ImageUpload } from \"./home\";\r\n\r\nfunction App() {\r\n  return <ImageUpload />;\r\n}\r\n\r\nexport default App;\r\n","import React, { useState, useRef } from \"react\";\r\nimport \"./camera.css\";\r\nimport CameraEnhanceOutlinedIcon from \"@mui/icons-material/CameraEnhanceOutlined\";\r\nimport CancelOutlinedIcon from \"@mui/icons-material/CancelOutlined\";\r\nimport StopCircleOutlinedIcon from \"@mui/icons-material/StopCircleOutlined\";\r\nimport DownloadForOfflineOutlinedIcon from \"@mui/icons-material/DownloadForOfflineOutlined\";\r\n\r\nimport { useEffect } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Container from \"@material-ui/core/Container\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport {\r\n  Paper,\r\n  CardActionArea,\r\n  CardMedia,\r\n  Grid,\r\n  TableContainer,\r\n  Table,\r\n  TableBody,\r\n  TableHead,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  CircularProgress,\r\n} from \"@material-ui/core\";\r\nimport { DropzoneArea } from \"material-ui-dropzone\";\r\nimport Clear from \"@material-ui/icons/Clear\";\r\nimport { makeStyles, withStyles } from \"@material-ui/core/styles\";\r\nimport { common } from \"@material-ui/core/colors\";\r\nimport RefreshOutlinedIcon from \"@mui/icons-material/RefreshOutlined\";\r\n\r\n//width: \"-webkit-fill-available\", clearbutton\r\nconst useStyles = makeStyles((theme) => ({\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  clearButton: {\r\n    width: 500,\r\n    borderRadius: \"15px\",\r\n    padding: \"10px 10px\",\r\n    color: \"#000000a6\",\r\n    fontSize: \"20px\",\r\n    fontWeight: 900,\r\n    top: \"-70px\",\r\n  },\r\n  root: {\r\n    maxWidth: 345,\r\n    flexGrow: 1,\r\n  },\r\n  media: {\r\n    height: 400,\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    margin: \"auto\",\r\n    maxWidth: 500,\r\n  },\r\n  gridContainer: {\r\n    justifyContent: \"right\",\r\n    padding: \"4em 1em 0 1em\",\r\n  },\r\n  mainContainer: {\r\n    backgroundPosition: \"right\",\r\n    height: \"90vh\",\r\n    marginTop: \"8px\",\r\n    marginRight: \"10%\",\r\n  },\r\n  imageCard: {\r\n    margin: \"auto\",\r\n    marginRight: \"-12%\",\r\n    maxWidth: 500,\r\n    height: 600,\r\n    backgroundColor: \"transparent\",\r\n    boxShadow: \"0px 9px 70px 0px rgb(0 0 0 / 30%) !important\",\r\n    borderRadius: \"15px\",\r\n  },\r\n  imageCardEmpty: {\r\n    height: \"auto\",\r\n  },\r\n  noImage: {\r\n    margin: \"auto\",\r\n    width: 400,\r\n    height: \"400 !important\",\r\n  },\r\n  input: {\r\n    display: \"none\",\r\n  },\r\n  uploadIcon: {\r\n    background: \"white\",\r\n  },\r\n  tableContainer: {\r\n    backgroundColor: \"transparent !important\",\r\n    boxShadow: \"none !important\",\r\n  },\r\n  table: {\r\n    backgroundColor: \"transparent !important\",\r\n  },\r\n  tableHead: {\r\n    backgroundColor: \"transparent !important\",\r\n  },\r\n  tableRow: {\r\n    backgroundColor: \"transparent !important\",\r\n  },\r\n  tableCell: {\r\n    fontSize: \"22px\",\r\n    backgroundColor: \"transparent !important\",\r\n    borderColor: \"transparent !important\",\r\n    color: \"#000000a6 !important\",\r\n    fontWeight: \"bolder\",\r\n    padding: \"1px 24px 1px 16px\",\r\n  },\r\n  tableCell1: {\r\n    fontSize: \"14px\",\r\n    backgroundColor: \"transparent !important\",\r\n    borderColor: \"transparent !important\",\r\n    color: \"#000000a6 !important\",\r\n    fontWeight: \"bolder\",\r\n    padding: \"1px 24px 1px 16px\",\r\n  },\r\n  tableBody: {\r\n    backgroundColor: \"transparent !important\",\r\n  },\r\n  text: {\r\n    color: \"white !important\",\r\n    textAlign: \"center\",\r\n  },\r\n  buttonGrid: {\r\n    maxWidth: \"416px\",\r\n    width: \"100%\",\r\n  },\r\n  detail: {\r\n    backgroundColor: \"white\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n  },\r\n  appbar: {\r\n    background: \"lightgreen\",\r\n    boxShadow: \"none\",\r\n    color: \"black\",\r\n  },\r\n  loader: {\r\n    color: \"#be6a77 !important\",\r\n  },\r\n}));\r\n\r\nconst CameraCard = () => {\r\n  const classes = useStyles();\r\n  const [selectedFile, setSelectedFile] = useState();\r\n  const [preview, setPreview] = useState();\r\n  const [data, setData] = useState();\r\n  const [image, setImage] = useState(false);\r\n  const [isLoading, setIsloading] = useState(false);\r\n  let confidence = 0;\r\n\r\n  const ColorButton = withStyles((theme) => ({\r\n    root: {\r\n      color: theme.palette.getContrastText(common.white),\r\n      backgroundColor: common.white,\r\n      \"&:hover\": {\r\n        backgroundColor: \"#ffffff7a\",\r\n      },\r\n    },\r\n  }))(Button);\r\n  const axios = require(\"axios\").default;\r\n\r\n  const sendFile = async () => {\r\n    if (image) {\r\n      let formData = new FormData();\r\n      formData.append(\"file\", selectedFile);\r\n      let res = await axios({\r\n        method: \"post\",\r\n        url: process.env.REACT_APP_API_URL,\r\n        data: formData,\r\n      });\r\n      if (res.status === 200) {\r\n        setData(res.data);\r\n      }\r\n      setIsloading(false);\r\n    }\r\n  };\r\n\r\n  const clearData = () => {\r\n    setData(null);\r\n    setImage(false);\r\n    setSelectedFile(null);\r\n    setPreview(null);\r\n  };\r\n  useEffect(() => {\r\n    if (!selectedFile) {\r\n      setPreview(undefined);\r\n      return;\r\n    }\r\n    const objectUrl = URL.createObjectURL(selectedFile);\r\n    setPreview(objectUrl);\r\n  }, [selectedFile]);\r\n\r\n  useEffect(() => {\r\n    if (!preview) {\r\n      return;\r\n    }\r\n    setIsloading(true);\r\n    sendFile();\r\n    sendFileImage();\r\n  }, [preview]);\r\n\r\n  const onSelectFile = (files) => {\r\n    if (!files || files.length === 0) {\r\n      setSelectedFile(undefined);\r\n      setImage(false);\r\n      setData(undefined);\r\n      return;\r\n    }\r\n    setSelectedFile(files[0]);\r\n    setData(undefined);\r\n    setImage(true);\r\n  };\r\n\r\n  if (data) {\r\n    confidence = (parseFloat(data.confidence) * 100).toFixed(2);\r\n  }\r\n  const onCaptureImage = (capturedImageData) => {\r\n    // Here, you can directly use the captured image data (data URL) in your ImageUpload component\r\n    setData(undefined);\r\n    setImage(true);\r\n    setIsloading(true); // Assuming you want to trigger the image processing on capture\r\n    sendFile();\r\n    processImage();\r\n    sendFileImage();\r\n  };\r\n\r\n  // State to manage the camera stream\r\n  const [stream, setStream] = useState(null);\r\n\r\n  // Refs to access the video and canvas elements\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n\r\n  // State to manage the position of the captured image\r\n  const [imagePosition, setImagePosition] = useState({ x: 0, y: 0 });\r\n\r\n  // Function to start the camera\r\n  const startCamera = async () => {\r\n    try {\r\n      // Request access to the user's camera\r\n      const mediaStream = await navigator.mediaDevices.getUserMedia({\r\n        video: true,\r\n      });\r\n      // Set the camera stream to the state\r\n      setStream(mediaStream);\r\n\r\n      // If the video element is available, set its source to the camera stream\r\n      if (videoRef.current) {\r\n        videoRef.current.srcObject = mediaStream;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error accessing camera:\", error);\r\n    }\r\n  };\r\n\r\n  // Function to stop the camera\r\n  const stopCamera = () => {\r\n    // Check if there is an active camera stream\r\n    if (stream) {\r\n      // Get all tracks from the stream and stop them\r\n      const tracks = stream.getTracks();\r\n      tracks.forEach((track) => track.stop());\r\n      // Set the camera stream in the state to null\r\n      setStream(null);\r\n    }\r\n  };\r\n\r\n  // Function to capture an image from the camera feed\r\n  const captureImage = () => {\r\n    // Check if both video and canvas elements are available\r\n    if (videoRef.current && canvasRef.current) {\r\n      // Get the 2D drawing context of the canvas\r\n      const context = canvasRef.current.getContext(\"2d\");\r\n      // Draw the current frame of the video onto the canvas\r\n      //context.drawImage(videoRef.current, 0, 0, 300, 200); // Adjust dimensions as needed\r\n      const width = videoRef.current.videoWidth;\r\n      const height = videoRef.current.videoHeight;\r\n\r\n      canvasRef.current.width = width;\r\n      canvasRef.current.height = height;\r\n\r\n      context.drawImage(videoRef.current, 0, 0, width, height);\r\n\r\n      // Apply image enhancements\r\n      enhanceImage(context);\r\n\r\n      // Use the callback of toDataURL\r\n      canvasRef.current.toDataURL(\"image/jpeg\", (dataUrl) => {\r\n        // Trigger the onCaptureImage callback with the captured image data\r\n        onCaptureImage(dataUrl);\r\n      });\r\n    }\r\n  };\r\n\r\n  // Function to apply image enhancements\r\n  const enhanceImage = (context) => {\r\n    // Example: Apply a sharpening filter\r\n    const imageData = context.getImageData(\r\n      0,\r\n      0,\r\n      context.canvas.width,\r\n      context.canvas.height\r\n    );\r\n    // Apply sharpening algorithm to imageData\r\n    // Replace the imageData on the canvas\r\n    context.putImageData(imageData, 0, 0);\r\n\r\n    // Other enhancements (noise reduction, contrast adjustment) can be implemented similarly\r\n  };\r\n\r\n  // Function to clear the captured image\r\n  const clearCapture = () => {\r\n    // Check if the canvas element is available\r\n    if (canvasRef.current) {\r\n      // Get the 2D drawing context of the canvas and clear it\r\n      const context = canvasRef.current.getContext(\"2d\");\r\n      context.clearRect(0, 0, 700, 600); // Adjust dimensions as needed\r\n    }\r\n  };\r\n\r\n  const downloadImage = () => {\r\n    // Get the data URL of the captured image from the canvas\r\n    const dataUrl = canvasRef.current.toDataURL(\"image/jpeg\");\r\n\r\n    // Create a link element\r\n    const downloadLink = document.createElement(\"a\");\r\n\r\n    // Set the href attribute with the data URL\r\n    downloadLink.href = dataUrl;\r\n\r\n    // Set the download attribute with a desired filename\r\n    downloadLink.download = \"captured_image.jpeg\";\r\n\r\n    // Trigger a click event on the link to start the download\r\n    downloadLink.click();\r\n  };\r\n\r\n  const processImage = () => {\r\n    if (canvasRef.current && videoRef.current) {\r\n      const ctx = canvasRef.current.getContext(\"2d\");\r\n\r\n      // Set canvas dimensions to match video dimensions\r\n      canvasRef.current.width = videoRef.current.videoWidth;\r\n      canvasRef.current.height = videoRef.current.videoHeight;\r\n\r\n      // Draw the current frame of the video onto the canvas\r\n      ctx.drawImage(\r\n        videoRef.current,\r\n        0,\r\n        0,\r\n        canvasRef.current.width,\r\n        canvasRef.current.height\r\n      );\r\n\r\n      // Get the data URL of the captured image from the canvas\r\n      const dataUrl = canvasRef.current.toDataURL(\"image/jpeg\");\r\n\r\n      // Create a FormData object\r\n      const formData = new FormData();\r\n\r\n      // Convert the data URL to a Blob\r\n      const blob = dataURLtoBlob(dataUrl);\r\n\r\n      // Pass the blob to the setSelectedFile function\r\n      setSelectedFile(blob);\r\n      // Append the Blob to the FormData object\r\n      formData.append(\"file\", blob);\r\n\r\n      // Send the file to the server\r\n      setIsloading(true);\r\n      //sendFile(formData);\r\n      sendFileImage(blob);\r\n      //sendFileToServer();\r\n    }\r\n  };\r\n\r\n  // Function to convert a data URL to a Blob\r\n  const dataURLtoBlob = (dataUrl) => {\r\n    const arr = dataUrl.split(\",\");\r\n    const mime = arr[0].match(/:(.*?);/)[1];\r\n    const bstr = atob(arr[1]);\r\n    let n = bstr.length;\r\n    const u8arr = new Uint8Array(n);\r\n    while (n--) {\r\n      u8arr[n] = bstr.charCodeAt(n);\r\n    }\r\n    return new Blob([u8arr], { type: mime });\r\n  };\r\n\r\n  const sendFileImage = async (blob) => {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append(\"file\", blob);\r\n\r\n      const response = await axios({\r\n        method: \"post\",\r\n        url: process.env.REACT_APP_API_URL,\r\n        data: formData,\r\n      });\r\n\r\n      if (response.status === 200) {\r\n        // Handle successful response\r\n        console.log(\"Image sent successfully!\");\r\n      } else {\r\n        setIsloading(false);\r\n\r\n        // Handle other response statuses\r\n        console.error(\"Failed to send image.\");\r\n      }\r\n    } catch (error) {\r\n      // Handle errors\r\n      console.error(\"Error sending image:\", error);\r\n    }\r\n  };\r\n\r\n  const refreshPage = () => {\r\n    window.location.reload();\r\n  };\r\n\r\n  return (\r\n    <div className=\"camera-card\">\r\n      <Container\r\n        maxWidth={false}\r\n        className={classes.mainContainer}\r\n        disableGutters={true}\r\n      >\r\n        <Grid\r\n          className={classes.gridContainer}\r\n          container\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          spacing={2}\r\n        >\r\n          {/* Live Feed Section */}\r\n          <Grid item xs={12} md={6}>\r\n            {/* Video element to display the camera stream */}\r\n            {stream && (\r\n              <div className=\"video-capture-container\">\r\n                <video\r\n                  className=\"livePreview\"\r\n                  ref={videoRef}\r\n                  autoPlay\r\n                  playsInline\r\n                />\r\n\r\n                <canvas\r\n                  className=\"capturedImage\"\r\n                  ref={canvasRef}\r\n                  position=\"relative\"\r\n                  width=\"300\"\r\n                  height=\"200\"\r\n                />\r\n\r\n                {/* Buttons for capturing, clearing, and stopping the camera */}\r\n                <div className=\"btnDiv\">\r\n                  <button className=\"captureBtn\" onClick={processImage}>\r\n                    <CameraEnhanceOutlinedIcon fontSize=\"large\" />\r\n                    <br />\r\n                    Capture\r\n                  </button>\r\n                  <button className=\"clearBtn\" onClick={clearCapture}>\r\n                    <CancelOutlinedIcon fontSize=\"large\" />\r\n                    <br />\r\n                    Clear\r\n                  </button>\r\n                  <button className=\"stopBtn\" onClick={stopCamera}>\r\n                    <StopCircleOutlinedIcon fontSize=\"large\" />\r\n                    <br /> Stop\r\n                  </button>\r\n                  <button className=\"downloadBtn\" onClick={downloadImage}>\r\n                    <DownloadForOfflineOutlinedIcon fontSize=\"large\" />\r\n                    <br /> Download\r\n                  </button>\r\n\r\n                  <button className=\"reloadBtn\" onClick={refreshPage}>\r\n                    <RefreshOutlinedIcon />\r\n                    <br /> Reload\r\n                  </button>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* If there is no camera stream, display a button to start the camera */}\r\n            {!stream && (\r\n              <div className=\"camera-container\">\r\n                <button className=\"startBtn\" onClick={startCamera}>\r\n                  Start Camera\r\n                </button>\r\n              </div>\r\n            )}\r\n          </Grid>\r\n\r\n          {/* Container Section */}\r\n          <Grid item xs={12} md={6}>\r\n            <Card\r\n              className={`${classes.imageCard} ${\r\n                !image ? classes.imageCardEmpty : \"\"\r\n              }`}\r\n            >\r\n              {preview && (\r\n                <CardActionArea>\r\n                  <CardMedia\r\n                    className={classes.media}\r\n                    image={preview}\r\n                    component=\"img\"\r\n                    title=\"Image Sample\"\r\n                  />\r\n                </CardActionArea>\r\n              )}\r\n              {!image && (\r\n                <CardContent className={classes.content}>\r\n                  <DropzoneArea\r\n                    acceptedFiles={[\"image/*\"]}\r\n                    dropzoneText={\r\n                      \"Potato Image Captured using Camera Will Be Processed Here\"\r\n                    }\r\n                    onChange={onSelectFile}\r\n                  />\r\n                </CardContent>\r\n              )}\r\n              {data && (\r\n                <CardContent className={classes.detail}>\r\n                  <TableContainer\r\n                    component={Paper}\r\n                    className={classes.tableContainer}\r\n                  >\r\n                    <Table\r\n                      className={classes.table}\r\n                      size=\"small\"\r\n                      aria-label=\"simple table\"\r\n                    >\r\n                      <TableHead className={classes.tableHead}>\r\n                        <TableRow className={classes.tableRow}>\r\n                          <TableCell className={classes.tableCell1}>\r\n                            Label:\r\n                          </TableCell>\r\n                          <TableCell\r\n                            align=\"right\"\r\n                            className={classes.tableCell1}\r\n                          >\r\n                            Confidence:\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableHead>\r\n                      <TableBody className={classes.tableBody}>\r\n                        <TableRow className={classes.tableRow}>\r\n                          <TableCell\r\n                            component=\"th\"\r\n                            scope=\"row\"\r\n                            className={classes.tableCell}\r\n                          >\r\n                            {data.class}\r\n                          </TableCell>\r\n                          <TableCell\r\n                            align=\"right\"\r\n                            className={classes.tableCell}\r\n                          >\r\n                            {confidence}%\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      </TableBody>\r\n                    </Table>\r\n                  </TableContainer>\r\n                </CardContent>\r\n              )}\r\n              {isLoading && (\r\n                <CardContent className={classes.detail}>\r\n                  <CircularProgress\r\n                    color=\"secondary\"\r\n                    className={classes.loader}\r\n                  />\r\n                  <Typography className={classes.title} variant=\"h6\" noWrap>\r\n                    Processing\r\n                  </Typography>\r\n                </CardContent>\r\n              )}\r\n            </Card>\r\n          </Grid>\r\n\r\n          {data && (\r\n            <Grid item className={classes.buttonGrid}>\r\n              <ColorButton\r\n                variant=\"contained\"\r\n                className={classes.clearButton}\r\n                color=\"primary\"\r\n                component=\"span\"\r\n                size=\"large\"\r\n                onClick={clearData}\r\n                startIcon={<Clear fontSize=\"large\" />}\r\n              >\r\n                Clear\r\n              </ColorButton>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      </Container>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CameraCard;\r\n\r\n//<Draggable bounds=\"parent\" position={imagePosition} onDrag={handleDrag}> content to be dragable </Dragable>\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport CameraCard from './cameraComponent';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n   \r\n    <CameraCard/>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}